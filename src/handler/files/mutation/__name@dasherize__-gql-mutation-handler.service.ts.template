import { Injectable } from '@angular/core';
import { assertUnreachable } from '@hypertrace/common';
import {
  GraphQlArgumentValue,
  GraphQlHandlerType,
  GraphQlMutationHandler,
  GraphQlSelection
} from '@hypertrace/graphql-client';

@Injectable({ providedIn: 'root' })
export class <%= classify(name) %>GraphQlMutationHandlerService
  implements GraphQlMutationHandler<<%= classify(name) %>MutationRequest, <%= classify(name) %>MutationResponse> {
  public readonly type: GraphQlHandlerType.Mutation = GraphQlHandlerType.Mutation;

  public matchesRequest(request: unknown): request is <%= classify(name) %>MutationRequest {
    return (
      typeof request === 'object' &&
      request !== null &&
      (request as Partial<<%= classify(name) %>MutationRequest>).requestType ===
        <%= symbolify(name) %>_GQL_MUTATION_REQUEST
    );
  }

  public convertRequest(request: <%= classify(name) %>MutationRequest): GraphQlSelection {
    return {
      path: '',
      arguments: [],
      children: []
    };
  }

  public convertResponse(response: <%= classify(name) %>ServerResponse): <%= classify(name) %>MutationResponse {
    return response;
  }
}

export const <%= symbolify(name) %>_GQL_MUTATION_REQUEST = Symbol(
  '<%= description(name) %>'
);

export interface <%= classify(name) %>MutationRequest {
  requestType: typeof <%= symbolify(name) %>_GQL_MUTATION_REQUEST;
}

export interface <%= classify(name) %>MutationResponse {}

// TODO: Add server response type
interface <%= classify(name) %>ServerResponse {}
